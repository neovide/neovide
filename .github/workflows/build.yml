name: Build and Test

permissions:
  checks: write
  contents: read

on:
  # Allow manual triggering
  workflow_dispatch:
  # Always run on pull requests
  pull_request:
    # And on `main` when manually pushed or after merges
    paths-ignore:
      - "website/**"
      - ".vscode/**"
      - "**.md"
  push:
    branches:
      - main
    paths-ignore:
      - "website/**"
      - ".vscode/**"
      - "**.md"

env:
  CARGO_TERM_COLOR: always
  MACOSX_DEPLOYMENT_TARGET: 10.11

defaults:
  run:
    shell: bash # necessary for windows

jobs:
  lint:
    uses: ./.github/workflows/lint-app.yml

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        toolchain: [stable, nightly]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}

      - name: Show toolchain info
        run: cargo --version --verbose

      - name: Install neovim
        uses: rhysd/action-setup-vim@v1
        with:
          neovim: true

      - name: Install Cargo Binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Install cargo-nextest
        run: cargo binstall -y cargo-nextest

      - uses: Swatinem/rust-cache@v2

      - name: Test
        env:
          RUST_BACKTRACE: full
        run: |
          cargo nextest run --profile ci
          mv target/nextest/ci/results.xml target/nextest/ci/results-${{ matrix.os }}.xml

      - name: Prepare test results
        run: |
          mkdir -p test-results-${{ matrix.os }}-${{ matrix.toolchain }}
          mv target/nextest/ci/results-*.xml test-results-${{ matrix.os }}-${{ matrix.toolchain }}/
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.toolchain }}
          path: |
            test-results-${{ matrix.os }}-${{ matrix.toolchain }}

  clippy:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        toolchain: [stable, nightly]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy

      - uses: Swatinem/rust-cache@v2

      - name: Show toolchain info
        run: cargo --version --verbose

      - name: Run Clippy
        run: cargo clippy --all-targets -- -D warnings
        continue-on-error: ${{ matrix.toolchain == 'nightly' }}

  event-upload:
    needs: test
    name: Upload Test Event
    runs-on: ubuntu-latest
    steps:
      - uses: actions/upload-artifact@v4
        with:
          name: test-event
          path: ${{ github.event_path }}

  build-deploy:
    strategy:
      fail-fast: false
      matrix:
        # NOTE: Should use the oldest available Ubuntu release, for maximum compatibility
        os: [windows-latest, macos-latest, ubuntu-20.04]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Install Cargo Binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Install dependencies
        run: |
          if [[ $RUNNER_OS == "Windows" ]]; then
            if ! which cargo-wix; then cargo binstall -y cargo-wix; fi

          elif [[ $RUNNER_OS == "macOS" ]]; then
            curl -L -o create-dmg.tar.gz https://github.com/create-dmg/create-dmg/archive/refs/tags/v1.2.2.tar.gz
            tar -xzf create-dmg.tar.gz
            cd create-dmg-1.2.2
            sudo make install
            cd ..
            rustup target add x86_64-apple-darwin
            rustup target add aarch64-apple-darwin

          elif [[ $RUNNER_OS == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get -qq install -y \
              curl gnupg ca-certificates git gcc-multilib g++-multilib cmake \
              libssl-dev pkg-config libfreetype6-dev libasound2-dev \
              libexpat1-dev libxcb-composite0-dev libbz2-dev freeglut3-dev \
              libxi-dev libfuse2 appstream
          fi

      - name: Install neovim
        uses: rhysd/action-setup-vim@v1
        with:
          neovim: true

      - uses: Swatinem/rust-cache@v2

      - name: Build
        run: |
          if [[ $RUNNER_OS == "Windows" ]]; then
            cargo wix --output target/release/neovide.msi --package neovide

          elif [[ $RUNNER_OS == "macOS" ]]; then
            # x86
            cargo build --locked --release --target=x86_64-apple-darwin
            # arch
            cargo build --locked --release --target=aarch64-apple-darwin

          elif [[ $RUNNER_OS == "Linux" ]]; then
            cargo build --locked --release
          fi

      - name: Prepare Artifacts
        run: |
          if [[ $RUNNER_OS == "Windows" ]]; then
            echo "ARTIFACT=neovide.exe" >> $GITHUB_ENV
            echo "ARTIFACT2=neovide.msi" >> $GITHUB_ENV

          elif [[ $RUNNER_OS == "macOS" ]]; then
            cd $GITHUB_WORKSPACE
            # create .dmg for x86_64-apple-darwin
            ./macos-builder/run x86_64-apple-darwin

            # create .dmg for aarch64-apple-darwin
            ./macos-builder/run aarch64-apple-darwin

            echo "ARTIFACT4=Neovide-x86_64-apple-darwin.dmg" >> $GITHUB_ENV
            echo "ARTIFACT5=Neovide-aarch64-apple-darwin.dmg" >> $GITHUB_ENV

          elif [[ $RUNNER_OS == "Linux" ]]; then
            cd target/release
            # archive artifact
            strip neovide
            tar czvf neovide-linux-x86_64.tar.gz neovide
            # create appimage
            curl -Lo linuxdeploy https://github.com/linuxdeploy/linuxdeploy/releases/latest/download/linuxdeploy-x86_64.AppImage
            chmod +x linuxdeploy
            curl -Lo linuxdeploy-plugin-appimage https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/latest/download/linuxdeploy-plugin-appimage-x86_64.AppImage
            chmod +x linuxdeploy-plugin-appimage

            export LDAI_OUTPUT=neovide.AppImage
            export LDAI_UPDATE_INFORMATION="gh-releases-zsync|neovide|neovide|latest|neovide.AppImage.zsync"
            ./linuxdeploy \
              --executable=neovide \
              --desktop-file=../../assets/neovide.desktop \
              --appdir=AppDir \
              --icon-file=../../assets/neovide.svg \
              --output=appimage

            echo "ARTIFACT=neovide-linux-x86_64.tar.gz" >> $GITHUB_ENV
            echo "ARTIFACT2=neovide.AppImage" >> $GITHUB_ENV
            echo "ARTIFACT3=neovide.AppImage.zsync" >> $GITHUB_ENV
          fi

      - if: env.ARTIFACT
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT }}
          path: target/release/${{ env.ARTIFACT }}

      - if: env.ARTIFACT2
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT2 }}
          path: target/release/${{ env.ARTIFACT2 }}

      - if: env.ARTIFACT3
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT3 }}
          path: target/release/${{ env.ARTIFACT3 }}

      - if: env.ARTIFACT4
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT4 }}
          path: target/x86_64-apple-darwin/release/bundle/osx/${{ env.ARTIFACT4 }}

      - if: env.ARTIFACT5
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT5 }}
          path: target/aarch64-apple-darwin/release/bundle/osx/${{ env.ARTIFACT5 }}
