name: Build-and-Test

on:
  push:
    paths-ignore:
      - "website/**"
      - ".vscode/**"
      - "**.md"

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    shell: bash # necessary for windows

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macOS-11, ubuntu-latest]
        toolchain: [stable, nightly]
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.rust == 'nightly' }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.toolchain }}
          components: rustfmt

      - name: Show Toolchain Info
        run: |
          cargo --version --verbose
          rustc --version
          cargo fmt --version

      - uses: Swatinem/rust-cache@v2

      - name: Check Formatting
        run: |
          cargo fmt --all -- --check

      - name: Install Dependencies and Neovim
        run: |
          if [[ $RUNNER_OS == "Windows" ]]; then
            cargo install cargo-wix
            choco install -y neovim
            echo "NEOVIM_BIN=C:/tools/neovim/nvim-win64/bin/nvim.exe" >> $GITHUB_ENV

          elif [[ $RUNNER_OS == "macOS" ]]; then
            rustup target add x86_64-apple-darwin
            rustup target add aarch64-apple-darwin
            cargo install cargo-bundle
            brew install neovim

          elif [[ $RUNNER_OS == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get -qq install -y \
              curl gnupg ca-certificates git gcc-multilib g++-multilib cmake \
              libssl-dev pkg-config libfreetype6-dev libasound2-dev \
              libexpat1-dev libxcb-composite0-dev libbz2-dev freeglut3-dev \
              libxi-dev libfuse2 appstream \
              neovim
          fi

      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest

      - name: Test
        env:
          RUST_BACKTRACE: full
        run: |
          cargo nextest run --profile ci

      - name: Publish Windows|macOS Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        if: ${{ matrix.os == 'windows-latest' || matrix.os == 'macOS-11' }}
        with:
          junit_files: target/nextest/ci/results.xml

      - name: Publish Linux Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: ${{ matrix.os == 'ubuntu-latest' }}
        with:
          junit_files: target/nextest/ci/results.xml

      - name: Build
        run: |
          if [[ $RUNNER_OS == "Windows" ]]; then
            cargo wix --output target/wix/neovide.msi --package neovide

          elif [[ $RUNNER_OS == "macOS" ]]; then
            echo "MACOSX_DEPLOYMENT_TARGET=10.11" >> $GITHUB_ENV
            # x86
            cargo build --release --target=x86_64-apple-darwin
            cargo bundle --release --target=x86_64-apple-darwin
            # arch 
            cargo build --release --target=aarch64-apple-darwin
            cargo bundle --release --target=aarch64-apple-darwin

          elif [[ $RUNNER_OS == "Linux" ]]; then
            cargo build --release
          fi

      - name: Prepare Artifacts
        if: ${{ matrix.toolchain == 'stable' }}
        run: |
          if [[ $RUNNER_OS == "macOS" ]]; then
            # merge builds
            mkdir -p target/release/bundle/osx
            rm -rf target/release/bundle/osx/Neovide.app || true
            cp -R target/x86_64-apple-darwin/release/bundle/osx/Neovide.app \
              target/release/bundle/osx/Neovide.app
            rm target/release/bundle/osx/Neovide.app/Contents/MacOS/neovide
            lipo target/x86_64-apple-darwin/release/bundle/osx/Neovide.app/Contents/MacOS/neovide \
              target/aarch64-apple-darwin/release/bundle/osx/Neovide.app/Contents/MacOS/neovide \
              -create -output \
              target/release/bundle/osx/Neovide.app/Contents/MacOS/neovide
            codesign --force --deep -s - target/release/bundle/osx/Neovide.app
            # create .dmg
            hdiutil create Neovide-uncompressed.dmg -volname "Neovide" -srcfolder target/release/bundle/osx
            hdiutil convert Neovide-uncompressed.dmg -format UDZO -o Neovide.dmg

          elif [[ $RUNNER_OS == "Linux" ]]; then
            # archive artifact
            strip ./target/release/neovide
            tar czvf ./target/release/neovide.tar.gz ./target/release/neovide
            # create appimage
            curl -Lo linuxdeploy https://github.com/linuxdeploy/linuxdeploy/releases/latest/download/linuxdeploy-x86_64.AppImage
            chmod +x linuxdeploy
            ./linuxdeploy \
              --executable=target/release/neovide \
              --desktop-file=assets/neovide.desktop \
              --appdir=target/release/AppDir \
              --icon-file=assets/neovide.svg \
              --output=appimage
          fi

      - name: Upload neovide-windows
        uses: actions/upload-artifact@v3
        if: ${{ matrix.os == 'windows-latest' && matrix.toolchain == 'stable' }}
        with:
          name: neovide-windows
          path: ./target/release/neovide.exe

      - name: Upload neovide.msi
        uses: actions/upload-artifact@v3
        if: ${{ matrix.os == 'windows-latest' && matrix.toolchain == 'stable' }}
        with:
          name: neovide-windows-installer
          path: ./target/wix/neovide.msi

      - name: Upload neovide.dmg
        uses: actions/upload-artifact@v3
        if: ${{ matrix.os == 'macOS-11' && matrix.toolchain == 'stable' }}
        with:
          name: neovide.dmg
          path: ./Neovide.dmg

      - name: Upload neovide-linux
        uses: actions/upload-artifact@v3
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.toolchain == 'stable' }}
        with:
          name: neovide-linux
          path: target/release/neovide.tar.gz

      - name: Upload neovide.AppImage
        uses: actions/upload-artifact@v3
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.toolchain == 'stable' }}
        with:
          name: neovide.AppImage
          path: Neovide_(nvim)-*.AppImage
